const pos = array(vec2f(-1, -1), vec2f(1, -1), vec2f(-1, 1), vec2f(1, 1));

struct VertexInput {
  @builtin(vertex_index) vertex: u32,
  @builtin(instance_index) instance: u32,
};

struct VertexOutput {
  @builtin(position) position: vec4f,
};

struct RenderDescriptor {
  time: f32,
  delta_time: f32,

  view: mat4x4f,
  static_view: mat4x4f,
}

struct Properties {
  anchor_point: vec2f,
  size: vec2f,
  position: vec2f,
  z_index: vec2f,
  visible: f32,
}

@group(0) @binding(0) var<uniform> desc: RenderDescriptor;
@group(0) @binding(1) var<storage> props: array<Properties>;

@vertex
fn vertex_main(input: VertexInput) -> VertexOutput {
  var output: VertexOutput;

  let prop = props[input.instance];
  let vertPos = pos[input.vertex] * prop.size;

  output.position = desc.view * vec4f(vertPos, 0, 1);

  return output;
}

@fragment
fn frag_main(input: VertexOutput) -> @location(0) vec4f {
  return vec4f(1, 1, 1, 1);
}
