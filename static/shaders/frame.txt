const pos = array(vec2f(-1, -1), vec2f(1, -1), vec2f(-1, 1), vec2f(1, 1));

struct VertexInput {
  @builtin(vertex_index) vertex: u32,
  @builtin(instance_index) instance: u32,
};

struct VertexOutput {
  @builtin(position) position: vec4f,
  @location(0) @interpolate(flat) instance: u32,
};

struct RenderDescriptor {
  time: f32,
  delta_time: f32,

  view: mat4x4f,
  static_view: mat4x4f,

  scale: f32,
}

struct Properties {
  background_color: vec4f,

  anchor_point: vec2f,

  size: vec2f,
  position: vec2f,

  z_index: vec2f,

  fixed: f32,
  visible: f32,
}

@group(0) @binding(0) var<uniform> desc: RenderDescriptor;
@group(0) @binding(1) var<storage> props: array<Properties>;

@vertex
fn vertex_main(input: VertexInput) -> VertexOutput {
  var output: VertexOutput;

  let prop = props[input.instance];

  let pixel_pos = pos[input.vertex] * prop.size * desc.scale + prop.position;

  if prop.fixed == 1 {
    output.position = desc.static_view * vec4f(pixel_pos, 0, 1);
  } else {
    output.position = desc.view * vec4f(pixel_pos, 0, 1);
  }
  output.instance = input.instance;

  return output;
}

@fragment
fn frag_main(input: VertexOutput) -> @location(0) vec4f {
  let prop = props[input.instance];

  return prop.background_color;
}
